// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/google/wire"
	"github.com/haandol/hexagonal/pkg/adapter/primary/router"
	"github.com/haandol/hexagonal/pkg/adapter/secondary/repository"
	"github.com/haandol/hexagonal/pkg/config"
	"github.com/haandol/hexagonal/pkg/connector/database"
	"github.com/haandol/hexagonal/pkg/port"
	"github.com/haandol/hexagonal/pkg/port/primaryport/routerport"
	"github.com/haandol/hexagonal/pkg/port/secondaryport/repositoryport"
	"github.com/haandol/hexagonal/pkg/service"
	"gorm.io/gorm"
	"net/http"
)

// Injectors from wire.go:

func InitTripApp(cfg config.Config) port.App {
	ginRouter := router.NewGinRouter(cfg)
	server := NewServer(cfg, ginRouter)
	db := provideTripDB(cfg)
	tripRepository := repository.NewTripRepository(db)
	tripService := service.NewTripService(tripRepository)
	tripRouter := router.NewTripRouter(tripService)
	tripApp := NewTripApp(server, ginRouter, tripRouter)
	return tripApp
}

// wire.go:

// TripApp
func provideTripDB(cfg config.Config) *gorm.DB {
	db, err := database.Connect(cfg.TripDB)
	if err != nil {
		panic(err)
	}
	return db
}

var provideRepositories = wire.NewSet(repository.NewTripRepository, wire.Bind(new(repositoryport.TripRepository), new(*repository.TripRepository)))

var provideRestServices = wire.NewSet(service.NewTripService)

var provideRouters = wire.NewSet(router.NewGinRouter, wire.Bind(new(http.Handler), new(*router.GinRouter)), wire.Bind(new(routerport.RouterGroup), new(*router.GinRouter)), router.NewTripRouter)
