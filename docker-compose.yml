services:
  mysql:
    image: mysql:8.4
    command: --mysql-native-password=ON
    restart: always
    profiles: ["backend"]
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_USER=mysql
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=saga
    volumes:
      - saga-mysql-data:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
  redis:
    image: redis:7.4
    restart: always
    profiles: ["backend"]
    ports:
      - "6379:6379"
  zookeeper:
    image: zookeeper
    restart: always
    profiles: ["backend"]
    ports:
      - "2181:2181"
  kafka:
    depends_on:
      - zookeeper
    image: bitnami/kafka:3.9
    restart: always
    profiles: ["backend"]
    ports:
      - "9093:9093"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  kafka-ui:
    depends_on:
      - kafka
    image: provectuslabs/kafka-ui
    restart: always
    profiles: ["ops"]
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
  aws-otel-collector:
    image: amazon/aws-otel-collector
    volumes:
      - ./otel-config.yml:/etc/otel-agent-config.yml
      - ~/.aws:/root/.aws
    profiles: ["ops"]
    ports:
      - "4317:4317" # OTLP receiver
    environment:
      - AWS_REGION=ap-northeast-2
    command: ["--config=/etc/otel-agent-config.yml"]
  dev:
    image: cosmtrek/air:v1.61.5
    platform: linux/arm64
    profiles: ["dev"]
    working_dir: /src
    stop_signal: SIGINT
    stop_grace_period: 5s
    volumes:
      - .:/src
      - ~/.aws:/root/.aws
    ports:
      - "8090:8090"
  migrate:
    image: haandol/goose:3.19.2
    platform: linux/arm64
    profiles: ["dev"]
    working_dir: /migrations
    volumes:
      - .:/migrations
      - ~/.aws:/root/.aws
    entrypoint: ["./scripts/migrate.sh", "up"]
  wire:
    build:
      context: .
      dockerfile: ./Dockerfile.local
    profiles: ["wire"]
    working_dir: /src/internal/app
    command: ["wire"]
    volumes:
      - .:/src
  swagger:
    build:
      context: .
      dockerfile: ./Dockerfile.local
    command: ["./scripts/swagger.sh"]
    profiles: ["swagger"]
    volumes:
      - .:/src

volumes:
  saga-mysql-data: {}
